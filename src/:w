/*
 * scrollTo
 * https://github.com/amazingsurge/jquery-scrollTo
 *
 * Copyright (c) 2015 amazingsurge
 * Licensed under the GPL license.
 */

(function(window, document, $, undefined) {
  'use strict';
  // Constructor
  //

  var getTime = function() {
    if (typeof window.performance !== 'undefined' && window.performance.now) {
      return window.performance.now();
    } else {
      return Date.now();
    }
  };
  
  var isPercentage = function(n) {
    return typeof n === 'string' && n.indexOf('%') != -1;
  };

    var conventToPercentage = function(n) {
      if (n < 0) {
        n = 0;
      } else if (n > 1) {
        n = 1;
      }
      return parseFloat(n).toFixed(4) * 100 + '%';
    }

    function convertPercentageToFloat(n) {
        return parseFloat(n.slice(0, -1) / 100, 10);
    }

  var requestAnimFrame = (function(){
    return  window.requestAnimationFrame       ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame    ||
            function( callback ){
              window.setTimeout(callback, 1000 / 60);
            };
  })();

  var cancelAnimationFrame = (function(id){
    return  window.cancelAnimationFrame       ||
            window.webkitCancelAnimationFrame ||
            window.mozCancelAnimationFrame    ||
            function( id ){
               window.clearTimeout( id );
            };
  })(id);



  var asScroll = function(element, options) {
    var self = this;

    this.element = element;
    this.$element = $(element);
    this.options = $.extend(true, {}, asScroll.defaults, options);
    
  
    if(this.options.containerSelector){
      this.$container = $(this.options.containerSelector);
    }else{
      this.$container = this.$element.is(document.body) ? $(window) : this.$element.parent();  
    }
    if(this.$container.length !== 1) return;
    
    this.namespace = this.options.namespace;
    this.attributes = {
      vertical: {
        axis: 'Y',
        overflow: 'overflow-y',

        scroll: 'scrollTop',
        scrollLength: 'scrollHeight',
        pageOffset: 'pageYOffset',

        ffPadding: 'padding-right',

        length: 'height',
        clientLength: 'clientHeight',
        offset: 'offsetHeight',

        crossLength: 'width',
        crossClientLength: 'clientWidth',
        crossOffset: 'offsetWidth'
      },
      horizontal: {
        axis: 'X',
        overflow: 'overflow-x',

        scroll: 'scrollLeft',
        scrollLength: 'scrollWidth',
        pageOffset: 'pageXOffset',

        ffPadding: 'padding-bottom',

        length: 'width',
        clientLength: 'clientWidth',
        offset: 'offsetWidth',

        crossLength: 'height',
        crossClientLength: 'clientHeight',
        crossOffset: 'offsetHeight'
      }
    };


    this.classes = {
    };

    this._frameId = null;
  };
  
  
  asScroll.prototype = {
    constructor : asScroll,

    init : function(){
      this.$targets = this.$element.find('[data-asScroll-target]');
      this.lists = {};

      this.$targets.each(function(){
        var $target = $(this);

        self.lists[$target.data('data-asScroll-target')] = {
          $el : $target
        }
      });
    },
    trigger: function(eventType) {
      var method_arguments = Array.prototype.slice.call(arguments, 1),
      data = [this].concat(method_arguments);

      // event
      this.$element.trigger(pluginName + '::' + eventType, data);

      // callback
      eventType = eventType.replace(/\b\w+\b/g, function(word) {
        return word.substring(0, 1).toUpperCase() + word.substring(1);
      });
      var onFunction = 'on' + eventType;

      if (typeof this.options[onFunction] === 'function') {
        this.options[onFunction].apply(this, method_arguments);
      }
    },

    /**
     * Checks whether the carousel is in a specific state or not.
     */
    is: function(state) {
        return this._states[state] && this._states[state] > 0;
    },
    /**
     * Enters a state.
     */
    enter: function(state) {
        if (this._states[state] === undefined) {
            this._states[state] = 0;
        }

        this._states[state] ++;
    },

    /**
     * Leaves a state.
     */
    leave: function(state) {
        this._states[state] --;
    },

    scrollTo : function(){
    
    },

    scrollBy : function(){
    
    },

    move: function(direction, value, trigger, sync) {
      if (this[direction] !== true || typeof value !== "number") {
        return;
      }
      var self = this;

      this.enter('moving');

      if (value < 0) {
        value = 0;
      } else if (value > this.getScrollLength(direction)) {
        value = this.getScrollLength(direction);
      }

      var attributes = this.attributes[direction];

      var callback = function() {
        self.leave('moving');
      }

      if (sync) {
        this.$container[0][attributes.scroll] = value;

        if (trigger !== false) {
          this.trigger('change', value / this.getScrollLength(direction));
        }
        callback();
      } else {
        self.enter('animating');
        var startTime = getTime();
        var start = self.getOffset(direction);
        var end = value;

        var run = function(time) {
          var percent = (time - startTime) / self.options.duration;

          if (percent > 1) {
            percent = 1;
          }

          percent = self.easing.fn(percent);

          var current = parseFloat(start + percent * (end - start), 10);
          self.$container[0][attributes.scroll] = current;

          if (trigger !== false) {
            self.trigger('change', value / self.getScrollLength(direction));
          }

          if (percent === 1) {
            window.cancelAnimationFrame(self._frameId);
            self._frameId = null;

            self.leave('animating');
            callback();
          } else {
            self._frameId = window.requestAnimationFrame(run);
          }
        };

        self._frameId = window.requestAnimationFrame(run);
      }
    }
  };

  asScroll.defaults = {
    speed: '1000',
    easing: 'linear',
    namespace: 'asScroll',
    offsetTop: 50,
    mobile: {
      width: 768,
      speed: '500',
      easing: 'linear',
    }
  };


  $.fn.asScroll = function(options) {
    if (typeof options === 'string') {
      var method = options;
      var method_arguments = Array.prototype.slice.call(arguments, 1);

      return this.each(function() {
        var api = $.data(this, 'asScroll');

        if (api && typeof api[method] === 'function') {
          api[method].apply(api, method_arguments);
        }
      });
    } else {
      return this.each(function() {
        var api = $.data(this, 'asScroll');
        if (!api) {
          api = new asScroll(this, options);
          $.data(this, 'asScroll', api);
        }
      });
    }
  };
}(window, document, jQuery));
